// responsive example, edit or remove
$break-small: 480px;
$break-sm: 560px;
$break-md: 750px;
$break-large: 1024px;
$break-large2: 1280px;
@mixin resp($media) {
  @if $media == pho {
    //phone
    @media only screen and (max-width: $break-small - 1) {
      @content;
    }
  } @else if $media == stab {
    //small tablet
    @media only screen and (min-width: $break-small) and (max-width: $break-md - 1) {
      @content;
    }
  } @else if $media == mtab {
    //middle tablet
    @media only screen and (min-width: $break-sm) and (max-width: $break-md - 1) {
      @content;
    }
  } @else if $media == tab {
    //big tablet portrait
    @media only screen and (min-width: $break-md) and (max-width: $break-large - 1) {
      @content;
    }
  } @else if $media == ltab {
    //landscape tablet
    @media only screen and (min-width: $break-large) and (max-width: $break-large2 - 1) {
      @content;
    }
  } @else if $media == sdevice {
    @media only screen and (max-width: $break-md - 1) {
      @content;
    }
  } @else if $media == mdevice {
    @media only screen and (min-width: $break-small) and (max-width: $break-large - 1) {
      @content;
    }
  } @else if $media == device {
    // gadgets
    @media only screen and (max-width: $break-large2 - 1) {
      @content;
    }
  } @else if $media == desktop {
    // desktops
    @media only screen and (min-width: $break-large) {
      @content;
    }
  } @else if $media == hudge {
    // desktops
    @media only screen and (min-width: $break-large2 + 1) {
      @content;
    }
  } @else if $media == delta {
    @media only screen and (min-width: $break-large + 25px) and (max-width: $break-large + 100px),
    only screen and (min-width: $break-md + 25px) and (max-width: $break-md + 100px) {
      @content;
    }
  } @else if $media == fringe {
    @media only screen and (min-width: $break-large) and (max-width: $break-large + 24px),
    only screen and (min-width: $break-md) and (max-width: $break-md + 24px),
    only screen and (max-width: $break-small + 100px) {
      @content;
    }
  }
}


////////==============================================///////
$min-ppho: 320px;
$min-lpho: 480px;
$min-phab: 620px;
$min-ptab: 768px;
$min-ltab: 1024px;
$min-desktop: 1242px;
$max-ppho: $min-lpho - 1;
$max-lpho: $min-phab - 1;
$max-phab: $min-ptab - 1;
$max-ptab: $min-ltab - 1;
$max-ltab: $min-desktop - 1;
@mixin media($media) {
  @if $media == spho { //small phone
    @media only screen and (max-width: $min-ppho) { @content; }
  }
  @if $media == ppho { //portrait phone
    @media only screen and (max-width: $max-ppho) { @content; }
  }
  @else if $media == lpho { //landscape phone
    @media only screen and (min-width: $min-lpho)  and (max-width: $max-lpho){ @content; }
  }
  @else if $media == pho { // landscape + portrait phone
    @media only screen and (max-width: $max-lpho){ @content; }
  }
  @else if $media == phab { //phablet
    @media only screen and (min-width: $min-phab)  and (max-width: $max-phab){ @content; }
  }
  @else if $media == lpho-phab { //landscape phone + phablet
    @media only screen and (min-width: $min-lpho) and (max-width: $max-phab){ @content; }
  }
  @else if $media == pho-phab { //phone + phablet
    @media only screen and (max-width: $max-phab){ @content; }
  }
  @else if $media == ptab { //portrait tablet
    @media only screen and (min-width: $min-ptab)  and (max-width: $max-ptab){ @content; }
  }
  @else if $media == pho-ptab { // phone + portrait tab
    @media only screen and (max-width: $max-ptab){ @content; }
  }
  @else if $media == ltab { //landscape tablet
    @media only screen and (min-width: $min-ltab)  and (max-width: $max-ltab){ @content; }
  }
  @else if $media == tab { // landscape + portrait tablet
    @media only screen and (min-width: $min-ptab)  and (max-width: $max-ltab){ @content; }
  }
  @else if $media == device { // phone + phab + tab
    @media only screen and (max-width: $max-ltab){ @content; }
  }
  @else if $media == desktop { // desktops
    @media only screen and (min-width: $min-desktop){ @content; }
  }
}
// retina bg
@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {
    @content;
  }
}

@mixin touch {
  @media screen and (-moz-touch-enabled) {
    @content;
  }
  @media screen and (-webkit-touch-enabled) {
    @content;
  }
  @media screen and (-ms-touch-enabled) {
    @content;
  }
  @media screen and (-o-touch-enabled) {
    @content;
  }
  @media screen and (touch-enabled) {
    @content;
  }
}

//asdfast font-family
@mixin font($alias, $name) {
  @font-face {
    font-family: $alias;
    src: url('fonts/' +$name+ '.eot');
    src: url("fonts/" +$name+ ".eot?#iefix") format("embedded-opentype"), url("fonts/"+$name+".woff") format("woff"), url("fonts/"+$name+".ttf") format("truetype");
    font-weight: normal;
    font-style: normal;
  }
}

//+font(black, cytiapro-black-webfont)

// ROTATE
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
  -moz-transform: rotate($deg + deg);
  -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
  -ms-transform: rotate($deg + deg);
  transform: rotate($deg + deg);
  filter: progid:DXImageTransform.Microsoft.Matrix(M11=$m11, M12=$m12, M21=$m21, M22=$m22, sizingMethod='auto expand');
  zoom: 1;
}

// TRANSITION
@mixin transition($what) {
  -moz-transition: $what;
  -o-transition: $what;
  -webkit-transition: $what;
  -ms-transition: $what;
  transition: $what;
}

%hide-text {
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

%clr {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
  *zoom: 1;
}

@mixin placeholder-color($color) {
  &:-moz-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}

%gray {
  filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale"); /* Firefox 10+ */
  filter: gray; /* IE6-9 */
  -webkit-filter: grayscale(100%); /* Chrome 19+ & Safari 6+ */
  filter: progid:DXImageTransform.Microsoft.BasicImage(grayScale=1);
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayScale=1)";
}

%gray-half {
  filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'saturate\' values=\'0.5\'/></filter></svg>#grayscale"); /* Firefox 10+ */
  filter: gray alpha(opacity=50); /* IE6-9 */
  -webkit-filter: grayscale(50%); /* Chrome 19+ & Safari 6+ */
}

%gray-zero {
  filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0\'/></filter></svg>#grayscale");
  -webkit-filter: grayscale(0%);
}

@mixin unselectable() {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin prevent-text() {
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

@mixin font-smoothing($val: antialiased) {
   -webkit-font-smoothing: $val;
   -moz-font-smoothing: $val;
   -ms-font-smoothing: $val;
   -o-font-smoothing: $val;
}

@mixin selection {
  & ::selection {
    @content;
  }
  & ::-moz-selection {
    @content;
  }
}

@mixin inline-block($valign: top) {
  display: inline-block;
  float: none;
  vertical-align: $valign;
}

@mixin cellInit {
  display: inline;
  float: left;
}

@mixin inlineBlockModelParent {
  font-size: 0px;
  letter-spacing: 0px;
  line-height: 0;
}

@mixin inlineBlockModelChild($fs: $defaultFontSize, $lh: $defaultLineHeight) {
  font-size: $fs;
  line-height: $lh;
  letter-spacing: normal;
}

@mixin cell_containerInit {
  @include inlineBlockModelParent;
}

@mixin cell_container {
  @include cell_containerInit;
  width: $fullWidth;
}

@mixin cellCreateOffset($fullWidth, $gutterWidth, $colNum, $offsetNum) {
  margin-left: ($fullWidth / $colNum) * $offsetNum + $gutterWidth * $offsetNum;
}

@mixin filter-gradient($start-color, $end-color, $orientation: vertical) {
    $gradient-type: if($orientation == vertical, 0, 1);
    filter: progid:DXImageTransform.Microsoft.gradient(gradientType=#{$gradient-type}, startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}');
}

@mixin vgradient($top, $bottom, $ie: 1) {
  @if $ie==1 {
    @include filter-gradient($top, $bottom, vertical);
  }
  background: linear-gradient($top, $bottom);
  background: -ms-linear-gradient(top, $top, $bottom); /* IE10+ */
}

@mixin hgradient($top, $bottom, $ie: 1) {
  @if $ie==1 {
    @include filter-gradient($top, $bottom, horizontal);
  }
  background: linear-gradient(to right,$top, $bottom);
  background: -ms-linear-gradient(left, $top, $bottom); /* IE10+ */
}

@mixin triangle($size, $color, $direction) {
  border-width: $size;
  border-style: solid;
  @if ($direction == 'top') {
    border-color: transparent transparent $color transparent;
  }
  @if ($direction == 'bottom') {
    border-color: $color transparent transparent transparent;
  }
  @if ($direction == 'left') {
    border-color: transparent $color transparent transparent;
  }
  @if ($direction == 'right') {
    border-color: transparent transparent transparent $color;
  }
}

@mixin stripe($size-h, $size-w, $color, $direction) {
  border-width: $size-h $size-w $size-h $size-w;
  border-style: solid;
  @if ($direction == 'top') {
    border-color: transparent $color $color $color;
  }
  @if ($direction == 'bottom') {
    border-color: $color $color transparent $color;
  }
  @if ($direction == 'left') {
    border-color: $color $color $color transparent;
  }
  @if ($direction == 'right') {
    border-color: $color transparent $color $color;
  }
}

@mixin clear {
  &:before, &:after {
    display: table;
    content: '';
    clear: both;
  }
}
